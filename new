#!/bin/python3
from bs4 import BeautifulSoup
import re
import requests
from typing import Tuple

from language_support import SUPPORTED_LANGUAGES


def scrape_problem(url: str) -> Tuple[str, str]:
    """
    Scrapes codeforces website for title and problem description. Also adds URL to bottom of description.

    Arguments:
        url -- URL of codeforces problem to scrape

    Returns:
        tuple -- Tuple with 2 string values, 1st is title of problem, 2nd is description
    """
    page = requests.get(url)
    soup = BeautifulSoup(page.content, "html.parser")

    description_html = soup.find_all("div", class_="problem-statement")[0]
    title_html = description_html.find_all("div", class_="title")[0]

    title = title_html.text
    # example: find "C1. " in "C1. A Title" and remove it from `title`
    re_match = re.match("^[A-Z]+[0-9]*\. ", title)
    if re_match:
        title = title[re_match.end():]

    # delete title from description
    title_html.clear()

    # inject url at bottom of description
    link = soup.new_tag("a", href=url, target="_blank")
    link.string = url
    description_html.append(link)

    description = description_html.prettify()

    return title, description


def generate_problem_info() -> Tuple[str, str]:
    """
    Ask for title from user (stdin), then returns that along with generic description.

    Returns:
        tuple -- Tuple with 2 string values, 1st is title of problem, 2nd is description
    """
    print("Please enter title of problem or name of directory to generate:")
    title = input()
    if not title:
        raise Exception("No title/directory name provided!")
    description = f"""\
# {title}

URL of codeforces problem was not provided, so this generic description is provided instead
    """

    return title, description


def main():
    print("Enter URL of codeforces problem (optional):")
    url = input().strip()
    print()

    if url:
        title, description = scrape_problem(url)
    else:
        print("No URL provided")
        title, description = generate_problem_info()

    print("Enter programming language you'd like to use. Supported language are:")
    for l in SUPPORTED_LANGUAGES:
        print(f"\t{l}")
    language = input().strip().lower()
    print()
    
    if language not in SUPPORTED_LANGUAGES:
        raise Exception(f'Language "{language}" is not supported. Please run the program again.')

    SetupClass = SUPPORTED_LANGUAGES[language]
    problem = SetupClass(title, description)

    print(f"Done with process {problem.__class__.__name__}. Problem can be found here:")
    print(problem.problem_dir)

if __name__ == "__main__":
    main()

